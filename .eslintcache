[{"C:\\Users\\Paolo\\react\\utenti-skuola-romagnoli\\src\\Componenti\\Table.js":"1","C:\\Users\\Paolo\\react\\utenti-skuola-romagnoli\\src\\Componenti\\Header.js":"2","C:\\Users\\Paolo\\react\\utenti-skuola-romagnoli\\src\\Componenti\\Form.js":"3","C:\\Users\\Paolo\\react\\utenti-skuola-romagnoli\\src\\index.js":"4"},{"size":5253,"mtime":1607356568983,"results":"5","hashOfConfig":"6"},{"size":743,"mtime":1607341003751,"results":"7","hashOfConfig":"6"},{"size":10243,"mtime":1607348520448,"results":"8","hashOfConfig":"6"},{"size":766,"mtime":1607353890294,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ifpd6e",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"C:\\Users\\Paolo\\react\\utenti-skuola-romagnoli\\src\\Componenti\\Table.js",[],"C:\\Users\\Paolo\\react\\utenti-skuola-romagnoli\\src\\Componenti\\Header.js",[],["20","21"],"C:\\Users\\Paolo\\react\\utenti-skuola-romagnoli\\src\\Componenti\\Form.js",["22","23"],"import React from 'react';\r\nimport { useForm  } from \"react-hook-form\";\r\nimport './Form.css';\r\nimport { useAlert } from 'react-alert';\r\n\r\nexport default function Form() {\r\n  const alertBello = useAlert();\r\n  const {register, handleSubmit } = useForm();\r\n\r\n  const onSubmit = (data) => {\r\n    let esito_dati = checkDatiForm(data);\r\n    if(esito_dati[\"ok\"]){\r\n      inserisciUtente(data);\r\n    }else{\r\n      let msg = esito_dati[\"errore\"];\r\n      alertBello.error(<div style={{\r\n         color: '#007dc3',\r\n         backgroundColor: '#FEE300',\r\n         borderRadius: '6px 6px 6px 6px',\r\n         paddingTop: \"5px\",\r\n         paddingLeft: \"7px\",\r\n         paddingRight: \"7px\",\r\n         paddingBottom: \"1px\",\r\n         fontSize: '18px',\r\n         fontFamily: 'Verdana'\r\n        }\r\n       }>{msg}</div>);\r\n    }\r\n  }\r\n\r\n  const checkDatiForm = (obj) => {\r\n    let esito = [];\r\n    esito[\"ok\"]=true;\r\n    esito[\"errore\"]=\"\";\r\n\r\n    //Controllo la lunghezza di tuti i parametri inseriti\r\n    for (const key of Object.keys(obj)) {\r\n      if(typeof(obj[key]) === 'string' && obj[key].length > 255){\r\n        esito[\"ok\"]=false;\r\n        esito[\"errore\"]=\"Tutti i campi devono avere la lunghezza massima di 255 caratteri\";\r\n        return esito;\r\n      }\r\n    }\r\n\r\n    //Controllo tutti i campi obbligatori, nel caso in cui il required non dovesse funzionare\r\n    let controlla_campi_obbligatori= checkCampiObl(obj);\r\n    if(!controlla_campi_obbligatori[\"ok\"]){\r\n      esito[\"ok\"]=false;\r\n      esito[\"errore\"]=controlla_campi_obbligatori[\"errore\"];\r\n      return esito;\r\n    }\r\n\r\n    //Le email devono rispettare la sintassi classica e non devono essere già presenti\r\n    let controlla_mail = checkMail(obj.email);\r\n    if(!controlla_mail[\"ok\"]){\r\n      esito[\"ok\"]=false;\r\n      esito[\"errore\"]=controlla_mail[\"errore\"];\r\n      return esito;\r\n    }\r\n\r\n    //Le date devono rispettare la sintassi classica e devono essere date di nascita di persone maggiorenni\r\n    let controlla_data_nascita = checkDataNascita(obj.data_nascita);\r\n    if(!controlla_data_nascita[\"ok\"]){\r\n      esito[\"ok\"]=false;\r\n      esito[\"errore\"]=controlla_data_nascita[\"errore\"];\r\n      return esito;\r\n    }\r\n\r\n    return esito;\r\n  }\r\n\r\n  const checkCampiObl = (obj) => {\r\n    let esito_campi_obl = [];\r\n    esito_campi_obl[\"ok\"]=true;\r\n    esito_campi_obl[\"errore\"]=\"\";\r\n    if(!obj.cognome){\r\n      esito_campi_obl[\"ok\"]=false;\r\n      esito_campi_obl[\"errore\"]=\"Il campo 'Cognome' è obbligatorio\";\r\n      return esito_campi_obl;\r\n    }else if(!obj.nome){\r\n      esito_campi_obl[\"ok\"]=false;\r\n      esito_campi_obl[\"errore\"]=\"Il campo 'Nome' è obbligatorio\";\r\n      return esito_campi_obl;\r\n    }else if(!obj.data_nascita){\r\n      esito_campi_obl[\"ok\"]=false;\r\n      esito_campi_obl[\"errore\"]=\"Il campo 'Data di nascita' è obbligatorio\";\r\n      return esito_campi_obl;\r\n    }else if(!obj.email){\r\n      esito_campi_obl[\"ok\"]=false;\r\n      esito_campi_obl[\"errore\"]=\"Il campo 'E-mail' è obbligatorio\";\r\n      return esito_campi_obl;\r\n    }\r\n\r\n    return esito_campi_obl;\r\n  }\r\n\r\n  const checkMail = (email_str) => {\r\n    let esito_mail = [];\r\n    esito_mail[\"ok\"]=true;\r\n    esito_mail[\"errore\"]=\"\";\r\n\r\n    if(!email_str){\r\n      esito_mail[\"ok\"]=false;\r\n      esito_mail[\"errore\"]=\"Il campo email è obbligatorio\";\r\n      return esito_mail;\r\n    }\r\n\r\n    if(!sintassiEmail(email_str)){\r\n      esito_mail[\"ok\"]=false;\r\n      esito_mail[\"errore\"]=\"Il campo email deve rispettare la sintassi: esempio@mail.com \";\r\n      return esito_mail;\r\n    }\r\n\r\n    //Controllo che non ci sia un altro utente con quella email\r\n    if(getUserObjectByEmail(email_str)){\r\n     esito_mail[\"ok\"]=false;\r\n     esito_mail[\"errore\"]=\"Indirizzo email già registrato\";\r\n     return esito_mail;\r\n    }\r\n\r\n    return esito_mail;\r\n  }\r\n\r\n  const sintassiEmail = (email) => {\r\n    const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    return re.test(String(email).toLowerCase());\r\n  }\r\n\r\n  const getUserObjectByEmail = (email_str) => {\r\n    return JSON.parse(localStorage.getItem(email_str));\r\n  }\r\n\r\n  const checkDataNascita = (dt_nascita_str) =>{\r\n    let esito_dtn = [];\r\n    esito_dtn[\"ok\"]=true;\r\n    esito_dtn[\"errore\"]=\"\";\r\n    //Controllo che sia del formato giusto\r\n    let esito_validate_date = validatedate(dt_nascita_str);\r\n    if(!esito_validate_date[\"ok\"]){\r\n      esito_dtn[\"ok\"]=false;\r\n      esito_dtn[\"errore\"]=esito_validate_date[\"errore\"];\r\n      return esito_dtn;\r\n    }\r\n    //Controllo che sia maggiorenne\r\n    if(etaByDate(dt_nascita_str) < 18){\r\n      esito_dtn[\"ok\"]=false;\r\n      esito_dtn[\"errore\"]=\"Non è possibile registrare un utente minorenne\";\r\n      return esito_dtn;\r\n    }\r\n    return esito_dtn;\r\n  }\r\n\r\n  const validatedate = (data_str) =>{\r\n    let esito_validate = [];\r\n    esito_validate[\"ok\"] = true;\r\n    esito_validate[\"errore\"] = \"\";\r\n\r\n\r\n    let data_ita = data_str.split('/');\r\n    let data_db = data_str.split('-');\r\n    let esito_coerenza = null;\r\n    if (data_ita.length>1){\r\n      esito_coerenza = coerenzaData(data_ita[0],data_ita[1],data_ita[2]);\r\n    }else if (data_db.length>1){\r\n      esito_coerenza = coerenzaData(data_db[2],data_db[1],data_db[0]);\r\n    }else{\r\n      esito_validate[\"ok\"]=false;\r\n      esito_validate[\"errore\"] = \"Data inserita in un formato non valido (es. data corretta: 01/01/2020)\";\r\n      return esito_validate;\r\n    }\r\n\r\n    if(!esito_coerenza[\"ok\"]){\r\n      esito_validate[\"ok\"] = esito_coerenza[\"ok\"];\r\n      esito_validate[\"errore\"] = esito_coerenza[\"errore\"];\r\n    }\r\n\r\n    return esito_validate;\r\n\r\n\r\n  }\r\n\r\n  const coerenzaData = (giorno,mese,anno) => {\r\n    let esito_coerenza_dt = [];\r\n    esito_coerenza_dt[\"ok\"]=true;\r\n    esito_coerenza_dt[\"errore\"]=\"\";\r\n    //Controllo che giorno, mese ed anno siano di lunghezze e valori accettabili\r\n    if(giorno.toString().length !== 2 || parseInt(giorno) > 31 || parseInt(giorno) < 1){\r\n      esito_coerenza_dt[\"ok\"]=false;\r\n      esito_coerenza_dt[\"errore\"]=\"Il giorno inserito non è possibile\";\r\n      return esito_coerenza_dt;\r\n    }else if (mese.toString().length !== 2 || parseInt(mese) > 12 || parseInt(mese) < 1) {\r\n      esito_coerenza_dt[\"ok\"]=false;\r\n      esito_coerenza_dt[\"errore\"]=\"Il mesi inserito non è possibile\";\r\n      return esito_coerenza_dt;\r\n    }else if(anno.toString().length !== 4 || parseInt(anno) === 0 || parseInt(anno) < 1850 ){\r\n      esito_coerenza_dt[\"ok\"]=false;\r\n      esito_coerenza_dt[\"errore\"]=\"L'anno inserito non è possibile\";\r\n      return esito_coerenza_dt;\r\n    }\r\n    //Controllo che non inseriscano giorni di nascita impossibili, ad esempio 31 Giugno 20xx\r\n    if(parseInt(new Date(anno, mese, 0).getDate()) < parseInt(giorno)){\r\n      esito_coerenza_dt[\"ok\"]=false;\r\n      esito_coerenza_dt[\"errore\"]=\"Il giorno inserito non è possibile per il mese dell'anno inserito \";\r\n      return esito_coerenza_dt;\r\n    }\r\n    return esito_coerenza_dt;\r\n  }\r\n\r\n  const etaByDate = (data_nascita) => {\r\n      let oggi = new Date();\r\n      let dataNascita = new Date(data_nascita);\r\n      let eta = oggi.getFullYear() - dataNascita.getFullYear();\r\n      var m = oggi.getMonth() - dataNascita.getMonth();\r\n      if (m < 0 || (m === 0 && oggi.getDate() < dataNascita.getDate())) {\r\n          eta--;\r\n      }\r\n      return eta;\r\n  }\r\n\r\n  const inserisciUtente = (data) =>{\r\n    //Salvo i dati nome e cognome nel formato Cognome Nome\r\n    data.cognome = beautifyName(data.cognome);\r\n    data.nome = beautifyName(data.nome);\r\n    //Salvo le date nel formato yyyy-mm-dd, convertendole se necessario\r\n    let data_tmp = data.data_nascita.split('/');\r\n    data.data_nascita = data_tmp.length>1 ? data_tmp[2]+\"-\"+data_tmp[1]+\"-\"+data_tmp[0] : data.data_nascita;\r\n    //Salvo tutto nello storage e poi ricarico la pagina\r\n    localStorage.setItem(data.email, JSON.stringify(data));\r\n    window.location.reload();\r\n  }\r\n\r\n  const beautifyName = (str) => {\r\n    //Vedo se è un nome/cognome fatto di più parole\r\n    let array_str = str.split(' ');\r\n    if(array_str.length > 1){\r\n      let arr_str_beauty = [];\r\n      array_str.forEach(function (str_tmp) {\r\n        arr_str_beauty.push(str_tmp.charAt(0).toUpperCase() + str_tmp.slice(1).toLowerCase())\r\n      });\r\n      return arr_str_beauty.join(' ');\r\n    }else{\r\n      return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div id=\"div_form_utenti\">\r\n      <span className=\"add_utente\" >Aggiungi utente</span>\r\n      <form className=\"form-inline form_utenti\" onSubmit={handleSubmit(onSubmit)}>\r\n        <div className=\"form-group campi_form_utenti\">\r\n          <div className=\"input-group-prepend\">\r\n            <span className=\"input-group-text\">Cognome</span>\r\n          </div>\r\n          <input required autoFocus type=\"text\" className=\"form-control testo_form\" id=\"cognome\" name=\"cognome\" aria-label=\"Cognome\" ref={register} />\r\n        </div>\r\n        <div className=\"form-group campi_form_utenti\">\r\n          <div className=\"input-group-prepend\">\r\n            <span className=\"input-group-text\">Nome</span>\r\n          </div>\r\n          <input required type=\"text\" className=\"form-control testo_form\" id=\"nome\" name=\"nome\" aria-label=\"Nome\" ref={register} />\r\n        </div>\r\n        <div className=\"input-group campi_form_utenti\">\r\n          <div className=\"input-group-prepend\">\r\n            <span className=\"input-group-text\">Data di nascita</span>\r\n          </div>\r\n          <input required type=\"date\" className=\"form-control testo_form\" placeholder=\"gg/mm/aaaa\" id=\"data_nascita\" name=\"data_nascita\" aria-label=\"Data di nascita\"  ref={register} />\r\n        </div>\r\n        <div className=\"form-group campi_form_utenti\">\r\n          <div className=\"input-group-prepend\">\r\n            <span className=\"input-group-text\">E-mail</span>\r\n          </div>\r\n          <input required type=\"email\" className=\"form-control testo_form\" id=\"email\" name=\"email\" aria-describedby=\"emailHelp\" aria-label=\"E-mail\" ref={register} />\r\n        </div>\r\n        <div className=\"form-group campi_form_utenti\">\r\n          <button  type=\"submit\" className=\"btn btn-primary\" >SALVA</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Paolo\\react\\utenti-skuola-romagnoli\\src\\index.js",[],{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":125,"column":26,"nodeType":"30","messageId":"31","endLine":125,"endColumn":27,"suggestions":"32"},{"ruleId":"28","severity":1,"message":"29","line":125,"column":51,"nodeType":"30","messageId":"31","endLine":125,"endColumn":52,"suggestions":"33"},"no-native-reassign",["34"],"no-negated-in-lhs",["35"],"no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["36","37"],["38","39"],"no-global-assign","no-unsafe-negation",{"messageId":"40","fix":"41","desc":"42"},{"messageId":"43","fix":"44","desc":"45"},{"messageId":"40","fix":"46","desc":"42"},{"messageId":"43","fix":"47","desc":"45"},"removeEscape",{"range":"48","text":"49"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"50","text":"51"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"52","text":"49"},{"range":"53","text":"51"},[3837,3838],"",[3837,3837],"\\",[3862,3863],[3862,3862]]